import{s as ak,n as gl}from"./scheduler.DKuV8lkR.js";import{S as pk,i as lk,e as a,s as l,H as i,t as $n,c as p,g as c,a as o,b as u,d as k,f as e,k as Bn,h as r,j as s,l as Qn}from"./index.BWbrWu7K.js";function ok(bi){let v,to="表达式是C++语言的基石。每个表达式都有两个属性：类型（type）和值类别（value category）。前者是大家都熟悉的，但是后者却可能是我们不太在意的。本文的目的是介绍与值类别相关的一些知识。",Fn,x,eo="前言",Wn,_,no="本文是C++基础系统文章中的一篇，将介绍C++中的值类别，以及与之相关的一些概念。",In,C,so="表达式与值类别",Vn,d,ao="C++的程序由一系列的表达式（expressions）构成。表达式是运算符和操作数的序列，表达式指定一项计算。",Dn,w,po="例如：<code>2 + 2</code> 或者 <code>std::cout &lt;&lt; &quot;Hello World&quot; &lt;&lt; std::endl</code>都是表达式。",Gn,y,lo="每个表达式有两个互相独立但是非常重要的属性：",Jn,T,oo="<li>类型（type）。类型是我们很熟悉的概念，<code>int</code>，<code>double</code>和<code>std::string</code>这些都是类型。类型确定了表达式可以进行哪些操作。</li> <li>除了类型之外，还有一个称之为值类别（value category）的属性，却可能是我们平时不太注意的。</li>",Nn,P,co="⠀",Yn,L,uo="<p>type和category在中文中似乎都可以翻译成“类型”。但在本文中，为了区分它们，统一将type翻译成“类型”，category翻译成“类别”。</p>",Zn,H,io="为什么要懂这些东西？",gn,b,ko="不管你在不在意，每个表达式都属于三种值类别（prvalue，xvalue，lvalue）中的一种。值类别可以影响表达式的含义，例如：你应该知道这个表达式是没有意义的：<code>3 = 4</code>，它甚至编译不过。但你可能说不出来为什么编译器会认为它编译不过。",ts,M,ro="如果你使用gcc编译器，它的报错如下：",es,E,ns,Mi='<code class="language-cpp">error<span class="token operator">:</span> lvalue required as left operand of assignment</code>',ss,R,vo="这个报错中的<code>lvalue</code>就是数字表达式<code>3</code>的值类别。",as,z,mo="再者，值类别还会影响函数的重载：当某个函数有两种重载可用，其中之一接受右值引用的形参而另一个接受 const 的左值引用的形参时，右值将被绑定到右值引用的重载之上。如果你不明白这里提到的“左值引用”和“右值”是指什么的话请不要担心，这就是本文所要说明的。",ps,q,fo="从左值和右值说起",ls,U,xo='最初的时候，只有左值（lvalue）和右值（rvalue）这两个术语。它们源于C++的祖先语言：<a href="https://en.wikipedia.org/wiki/CPL_(programming_language)" rel="nofollow">CPL</a>。',os,X,_o="lvalue之所以叫lvalue，是因为它常常出现在等号的左边（left-hand side of an assignment）。同样，rvalue是因为它常常出现在等号的右边（right-hand side of an assignment）。",cs,j,Co="回顾一下上面的<code>3 = 4</code>编译报错，就是因为编译器要求等号的左边得是一个lvalue，而数字<code>3</code>其实是一个rvalue，所以这个是无法通过编译的。",us,A,wo="C语言遵循了相似的分类法，但是否需要等号赋值已经不再重要。在C语言中，标识一个对象的表达式称之为左值，不过lvalue已经是“locator value”的简写，因为lvalue对应了一块内存地址。",is,h,yo="你可以简单的理解为：<strong>左值对应了具有内存地址的对象，而右值仅仅是临时使用的值</strong>。例如<code>int a = 1</code>中，<code>a</code>是左值，<code>1</code>是右值。",ks,O,To="C++11中的值类别",rs,S,Po="C++中对于值类别的定义也经历一些变化。从C++11标准开始，值类别早以不止是lvalue和rvalue两种这么简单。",vs,K,Lo="但情况也不算太坏，因为主要的值类别有：lvalue，prvalue 和 xvalue三种。加上两种混合类别：glvalue和rvalue，一共有五种。",ms,$,Ho="我们来看一下它们的定义：",fs,B,bo="<li>A <strong>glvalue</strong>（generalized lvalue） is an expression whose evaluation determines the identity of an object, bit-field, or function.</li> <li>A <strong>prvalue</strong>（pure rvalue） is an expression whose evaluation initializes an object or a bit-field, or computes the value of an operand of an operator, as specified by the context in which it appears, or an expression that has type cv void.</li> <li>An <strong>xvalue</strong>（eXpiring value） is a glvalue that denotes an object or bit-field whose resources can be reused （usually because it is near the end of its lifetime）.</li> <li>An <strong>lvalue</strong> is a glvalue that is not an xvalue.</li> <li>An <strong>rvalue</strong> is a prvalue or an xvalue.</li>",xs,Q,Mo=`⠀
这个定义很难理解，就算翻译成中文，也一样不好理解。所以下文会通过一些示例来对它们进行说明。`,_s,F,Eo="这五种类别的分类基于表达式的两个特征：",Cs,W,Ro="<li>是否拥有身份（identity）：可以确定表达式是否与另一表达式指代同一实体，例如比较它们所标识的对象或函数的（直接或间接获得的）地址；</li> <li>是否可被移动（具体见下文）：移动构造函数、移动赋值运算符或实现了移动语义的其他函数重载能够绑定到这个表达式。</li>",ds,I,zo=`⠀
由此，C++11中对于这五种类别定义如下：`,ws,V,qo="<li>lvalue是指：拥有身份且不可被移动的表达式。</li> <li>xvalue是指：拥有身份且可被移动的表达式。</li> <li>prvalue是指：不拥有身份且可被移动的表达式。</li> <li>glvalue是指：拥有身份的表达式，lvalue和xvalue都是glvalue。</li> <li>rvalue是指：可被移动的表达式。prvalue和xvalue都是rvalue。</li>",ys,D,Uo=`⠀
这么说起来还是有些拗口，不过其实颠来倒去就是两个特征的“是”与“否”，所以通过一个2x2的表格就很容易描述清楚了：`,Ts,G,Xo="<thead><tr><th> </th> <th>拥有身份（glvalue）</th> <th>不拥有身份</th></tr></thead> <tbody><tr><td><strong>可移动（rvalue）</strong></td> <td>xvalue</td> <td>prvalue</td></tr> <tr><td><strong>不可移动</strong></td> <td>lvalue</td> <td>不存在</td></tr></tbody>",Ps,J,jo="<p>注：不存在不拥有身份也不可移动的表达式。</p>",Ls,N,Ao="我们可以通过下面这个图来记忆五种类别的关系：",Hs,Y,ho='<img src="/post-images/value_cat.png" alt="image1"/>',bs,Z,Oo="每种值类别都有其关联的性质，这些性质决定了表达式可以如何使用。",Ms,g,So="glvalue",Es,tt,Ko="glvalue是拥有身份的表达式，它对应了一块内存地址。glvalue有lvalue和xvalue两种形式，具体的示例见下文。",Rs,et,$o="glvalue具有以下一些特性：",zs,nt,Bo="<li>glvalue可以自动转换成prvalue。例如：<code>int a = b</code>，等号右边的lvalue会自动转换成rvalue。</li> <li>glvalue可以是多态的（polymorphic），它所对应了动态类型和静态类型可以不一样，例如：一个指向子类的父类指针。</li> <li>glvalue可以是不完整类型，只要表达式允许。例如：由前置声明但未定义的类类型。</li>",qs,st,Qo="⠀",Us,at,Fo="rvalue",Xs,pt,Wo="rvalue是指可以移动的表达式。prvalue和xvalue都是rvalue，具体的示例见下文。",js,lt,Io="rvalue具有以下特征：",As,ot,Vo="<li>无法对rvalue进行取地址操作。例如：<code>&amp;42</code>，<code>&amp;i++</code>，这些表达式没有意义，也编译不过。</li> <li>rvalue不能放在赋值或者组合赋值符号的左边，例如：<code>3 = 5</code>，<code>3 += 5</code>，这些表达式没有意义，也编译不过。</li> <li>rvalue可以用来初始化const左值引用（见下文）。例如：<code>const int&amp; a = 1</code>。</li> <li>rvalue可以用来初始化右值引用（见下文）。</li> <li>rvalue可以影响函数重载：当被用作函数实参且该函数有两种重载可用，其中之一接受右值引用的形参而另一个接受 const 的左值引用的形参时，右值将被绑定到右值引用的重载之上。</li>",hs,ct,Do=`⠀
下面是三种具体的值类别：`,Os,ut,Go="lvalue",Ss,it,Jo="左值是指拥有身份但不可移动的表达式。",Ks,kt,No="变量，函数或者数据成员的名称都是左值表达式。下面是一些左值的例子：",$s,rt,Bs,Ei=`<code class="language-cpp"><span class="token string">"hello world"</span> <span class="token comment">// lvalue</span>
<span class="token keyword">int</span> a<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// lvalue</span>
<span class="token operator">++</span>a<span class="token punctuation">;</span> <span class="token comment">// lvalue int&amp; get() &#123;return a;&#125;</span>
<span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// lvalue int b[4]&#123;&#125;; // lvalue</span>
b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// lvalue int foo();</span>
<span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>a <span class="token punctuation">&#123;</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// lvalue struct foo &#123;int a;&#125;;</span>
foo f<span class="token punctuation">;</span> <span class="token comment">// lvalue</span>
f<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment">// lvalue int &amp;&amp;c&#123; 55 &#125;; // lvalue</span>
<span class="token keyword">int</span> <span class="token operator">&amp;</span>d<span class="token punctuation">&#123;</span> a <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// lvalue</span></code>`,Qs,vt,Yo="lvalue具有以下特征：",Fs,mt,Zo="<li>所有glvalue具有的特征</li> <li>可以通过取址运算符获取其地址</li> <li>可修改的左值可用作内建赋值和内建符合赋值运算符的左操作数</li> <li>可以用来初始化左值引用（见下文）</li>",Ws,ft,go="⠀",Is,xt,tc="prvalue",Vs,_t,ec="prvalue是纯右值，数字字面值或者函数返回的是非引用的值都是prvalue。",Ds,Ct,nc="下面一些prvalue的例子：",Gs,dt,Js,Ri=`<code class="language-cpp"><span class="token number">42</span> <span class="token comment">// prvalue</span>
<span class="token boolean">true</span> <span class="token comment">// prvalue int foo();</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// prvalue int a&#123;&#125;, b&#123;&#125;; // both lvalues</span>
a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment">// prvalue</span>
<span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment">// prvalue a++ // prvalue</span>
b<span class="token operator">--</span> <span class="token comment">// prvalue</span>
a <span class="token operator">&amp;&amp;</span> b <span class="token comment">// prvalue</span>
a <span class="token operator">&lt;</span> b <span class="token comment">// prvalue double &#123;&#125;; // prvalue</span>
std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>X<span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// prvalue</span></code>`,Ns,wt,sc="prvalue具有以下特征：",Ys,yt,ac="<li>所有rvalue具有的特征</li> <li>prvalue不会是多态的</li> <li>prvalue不会是不完全类型</li> <li>prvalue不会是抽象类型或数组</li>",Zs,Tt,pc="⠀",gs,Pt,lc="xvalue",ta,Lt,oc="xvalue也指向了一个对象，不过这个对象已经接近了生命周期的末尾。这通常和移动语义（见下文）有关。",ea,Ht,cc="下面是一些示例：",na,bt,uc="<p>xvalue与右值引用有很强的关联性，因此看了下文对于右值引用的说明再回过头来看xvalue会更好理解。</p>",sa,Mt,aa,zi=`<code class="language-cpp"><span class="token keyword">bool</span> b <span class="token punctuation">&#123;</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// lvalue</span>
std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// xvalue</span>
<span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&amp;&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// xvalue int&amp;&amp; foo();</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// xvalue struct foo &#123;int a;&#125;;</span>
std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment">// xvalue</span>
foo<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment">// xvalue int a[4]&#123;&#125;;</span>
std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// xvalue</span>
std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// xvalue using arr = int[2];</span>
arr<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// xvalue</span></code>`,pa,Et,ic="xvalue具有所有rvalue和glvalue所有的特征。",la,Rt,kc="左值引用与右值引用",oa,zt,rc="<p>注意：左值引用和右值引用不属于值类别（value category），它们是表达式的类型（type），并且都是组合类型（compound type）。</p>",ca,qt,vc="我相信每一个C++程序员一定都会知道什么“引用”，但可能并非每个人都知道什么是“右值引用”（rvalue reference）。",ua,Ut,mc="在C++11之前，引用分为const引用和非const引用。这两种引用在C++11中都称做左值引用（lvalue reference）。",ia,Xt,fc="无法将非const左值引用指向右值。例如，下面这行代码是无法通过编译的：",ka,jt,xc="编译器的报错是：",ra,At,va,qi=`<code class="language-cpp">error<span class="token operator">:</span> non<span class="token operator">-</span><span class="token keyword">const</span> lvalue reference to type <span class="token char">'int'</span> cannot bind to a temporary of type <span class="token char">'int'</span></code>`,ma,ht,_c="它的意思是：你无法将一个非const左值引用指向一个临时的值。",fa,Ot,Cc="但是const类型的左值引用是可以绑定到右值上的，所以下面这行代码是没问题的：",xa,St,dc="不过，由于这个引用是const的，因此你无法修改其值的内容。",_a,Kt,wc="C++11新增了右值引用，左值引用的写法是<code>&amp;</code>，右值引用的写法是<code>&amp;&amp;</code>。",Ca,$t,yc="右值是一个临时的值，右值引用是指向右值的引用。右值引用延长了临时值的生命周期，并且允许我们修改其值。",da,Bt,Tc="例如：",wa,Qt,ya,Ui=`<code class="language-cpp">std<span class="token double-colon punctuation">::</span>string s1 <span class="token operator">=</span> <span class="token string">"Hello "</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>string s2 <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;&amp;</span> s_rref <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span> <span class="token comment">// the result of s1 + s2 is an rvalue</span>
s_rref <span class="token operator">+=</span> <span class="token string">", my friend"</span><span class="token punctuation">;</span> <span class="token comment">// I can change the temporary string!</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s_rref <span class="token operator">&lt;&lt;</span> <span class="token char">'&#92;n'</span><span class="token punctuation">;</span> <span class="token comment">// prints "Hello world, my friend"</span></code>`,Ta,Ft,Pc="在上面这个代码中，<code>s_rref</code>是一个指向临时对象的引用：右值引用。由于这里没有const，因此我们可以借此修改临时对象的内容。",Pa,Wt,Lc="右值引用使得我们可以创建出以此为基础的函数重载，例如：",La,It,Ha,Xi=`<code class="language-cpp"><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>X<span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"lvalue reference version"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>X<span class="token operator">&amp;&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"rvalue reference version"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ba,Vt,Hc="当传入的参数是一个左值时，会绑定到第一个版本上。当传入的参数是一个右值时，会绑定到第二个版本上，以下面这段代码为例：",Ma,Dt,Ea,ji=`<code class="language-cpp">X <span class="token function">returnX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> X x<span class="token punctuation">;</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token function">returnX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ra,Gt,bc="其输出是：",za,Jt,qa,Ai=`<code class="language-cpp">lvalue reference version
rvalue reference version</code>`,Ua,Nt,Mc="我们整理一下上面的内容：",Xa,Yt,Ec="<li>左值引用：即可以绑定到左值（非const），也可以绑定到右值（const）</li> <li>右值引用：只能绑定到右值</li>",ja,Zt,Rc=`⠀
右值引用本身是一个左值还是一个右值？答案是：都有可能。<strong>右值引用既可能是lvalue，也可能是rvalue。如果它有名称，则是lvalue，否则是rvalue。</strong>`,Aa,gt,zc="右值引用是C++11中两个新增功能的语法基础，这两个功能是：",ha,te,qc="<li>移动语义（Move Semantics）</li> <li>完美转发（Perfect Forward）</li>",Oa,ee,Uc=`⠀
下面来逐个介绍。`,Sa,ne,Xc="移动语义",Ka,se,jc="我们知道，在C++中，你可以为类定义拷贝构造函数（copy constructor）和拷贝赋值（copy assignment）运算符。",$a,ae,Ac="它们看起来像这样：",Ba,pe,Qa,hi=`<code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">X</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span> <span class="token function">X</span><span class="token punctuation">(</span><span class="token keyword">const</span> X<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token comment">// copy constructor &#123; m_data = new int[other.m_size]; std::copy(other.m_data, other.m_data + other.m_size, m_data); m_size = other.m_size; &#125; X&amp; operator=(X other) // copy assignment &#123; if(this == &amp;other) return *this; delete[] m_data; m_data = new int[other.m_size]; std::copy(other.m_data, other.m_data + other.m_size, m_data); m_size = other.m_size; return *this; &#125; X&amp; operator=(const X&amp; other) // copy assignment &#123; if(this == &amp;other) return *this; delete[] m_data; m_data = new int[other.m_size]; std::copy(other.m_data, other.m_data + other.m_size, m_data); m_size = other.m_size; return *this; &#125; private: int* m_data; size_t m_size;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,Fa,le,hc='<p>当然，如果你为类定义了拷贝构造函数和拷贝赋值运算符，你通常还应当为其定义析构函数。这称之为<a href="https://en.wikipedia.org/wiki/Rule_of_three_%28C++_programming%29" rel="nofollow">Rule of Three</a>。</p>',Wa,m,Dl,Oc="10",Gl,Jl,Ia,oe,Sc='<img src="/post-images/copy.png" alt="image2"/>',Va,ce,Kc="而移动操作则轻量了很多，因为它不涉及新数据的产生，仅仅是将原先的数据更改拥有者。",Da,ue,$c='<img src="/post-images/move.png" alt="image3"/>',Ga,ie,Bc="在C++11中，你可以为类定义移动构造函数（move constructor）和移动赋值（move assignment）运算符。它们看起来是这样：",Ja,ke,Na,Oi=`<code class="language-cpp"><span class="token function">X</span><span class="token punctuation">(</span>X<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
X<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>X<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Ya,re,Qc="你应该已经看出，这里用到的都是右值引用。",Za,ve,Fc="继续以上面定义的类型为例，其移动构造函数和移动赋值运算符的实现可能是这样的：",ga,me,tp,Si=`<code class="language-cpp"><span class="token function">X</span><span class="token punctuation">(</span>X<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">)</span> <span class="token comment">// &lt;-- rvalue reference in input</span>
<span class="token punctuation">&#123;</span> m_data <span class="token operator">=</span> other<span class="token punctuation">.</span>m_data<span class="token punctuation">;</span> <span class="token comment">// ① m_size = other.m_size; other.m_data = nullptr; // ② other.m_size = 0;</span>
<span class="token punctuation">&#125;</span> X<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>X<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">)</span> <span class="token comment">// &lt;-- rvalue reference in input</span>
<span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> <span class="token operator">&amp;</span>other<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m_data<span class="token punctuation">;</span> <span class="token comment">// ③ m_data = other.m_data; // ④ m_size = other.m_size; other.m_data = nullptr; // ⑤ other.m_size = 0; return *this;</span>
<span class="token punctuation">&#125;</span></code>`,ep,fe,Wc="在这段代码中：",np,xe,Ic="<li>获取<code>other</code>对象所包含的值</li> <li>处理<code>other</code>的内部结构，防止再次使用</li> <li>释放自身包含的指针</li> <li>获取<code>other</code>对象所包含的值</li> <li>处理<code>other</code>的内部结构，防止再次使用</li>",sp,_e,Vc=`⠀
现在，该类有了拷贝和移动两种操作，那编译器如何知道该选择哪个呢？答案是，根据传入的参数类型：如果是左值引用，则使用拷贝操作；如果是右值引用，则使用移动操作。`,ap,Ce,pp,Ki=`<code class="language-cpp">X <span class="token function">createX</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">X</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span> X <span class="token function">h1</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// regular constructor X h2(h1); // copy constructor (lvalue in input) X h3 = createX(2000); // move constructor (rvalue in input)  h2 = h3; // assignment operator (lvalue in input) h2 = createX(500); // move assignment operator (rvalue in input)</span>
<span class="token punctuation">&#125;</span></code>`,lp,de,Dc="这里的两次移动操作避免了数据复制的资源消耗。",op,we,Gc="接下来的问题是：如果是左值，也能调用移动操作吗？",cp,ye,Jc="答案是肯定的，借助<code>std::move()</code>即可。",up,Te,Nc="<code>std::move()</code>的名称具有一定的迷惑性，因为它并没有进行任何“移动”的操作，它仅仅是：<strong>无条件的将实参强制转换成右值引用</strong>，仅此而已。因此C++之父认为它的名字叫做<code>rval()</code>应该更合适。但是不管怎么样，由于历史原因，它已经叫做<code>std::move()</code>。",ip,Pe,Yc="所以，下面这个代码中<code>x2</code>构造时调用的也是移动构造函数：",kp,Le,rp,$i=`<code class="language-cpp">X <span class="token function">x1</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
X <span class="token function">x2</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,vp,He,Zc="不过需要注意的是，由于<code>x1</code>其中包含的值已经被移动走了，因此你不应当再使用它了。",mp,be,gc="有了右值引用和移动操作之后，STL中的集合操作变得更加高效了，例如：",fp,Me,xp,Bi=`<code class="language-cpp">std<span class="token double-colon punctuation">::</span>string str <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">;</span> v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ①</span>
v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ②</span></code>`,_p,Ee,tu="这里的①将复制一个字符串添加到集合中，而②是将已有的对象移动进集合中，因此自然是更高效的。",Cp,Re,eu="perfect forward",dp,ze,nu='在C++11之前，C++语言存在一个称之为“<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1385.htm" rel="nofollow">The Forwarding Problem</a>”的问题。',wp,qe,su="这个问题直到C++11才得以解决。不过要说清楚这个问题并不那么容易。下面以一个具体的代码示例来说明。",yp,Ue,au="一直以来，我们都是通过<code>push_back</code>方法往<code>vector</code>中添加对象的：",Tp,Xe,Pp,Qi=`<code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyKlass</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span> <span class="token function">MyKlass</span><span class="token punctuation">(</span><span class="token keyword">int</span> ii_<span class="token punctuation">,</span> <span class="token keyword">float</span> ff_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> some function <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>MyKlass<span class="token operator">></span> v<span class="token punctuation">;</span> v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">MyKlass</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.14f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Lp,je,pu='但看了上面的内容，你应该已经意识到，这样的方式是通过拷贝的形式完成添加的：要先创建出一个临时对象来，然后拷贝进集合中，这样做效率不够高。更好的方法当时是通过移动。于是C++11为集合类添加了 <a href="https://en.cppreference.com/mwiki/index.php?title=Special%3ASearch&amp;search=emplace" rel="nofollow">emplace</a> 和 <a href="https://en.cppreference.com/mwiki/index.php?title=Special%3ASearch&amp;search=emplace_back" rel="nofollow">emplace_back</a> 方法。',Hp,Ae,lu="<code>emplace_back</code>用起来像这样：",bp,he,Mp,Fi='<code class="language-cpp">v<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.14f</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',Ep,Oe,ou="这个方法接受模板实例类<code>MyKlass</code>的构造函数形参，这样做避免了临时对象的构造。",Rp,Se,cu="但是你有没有想过<code>emplace_back</code>函数是如何实现的呢？我们可以尝试一下。",zp,Ke,uu="我们尝试的第一个版本可能是这样：",qp,$e,Up,Wi=`<code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">T2</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">emplace_back</span><span class="token punctuation">(</span>T1 e1<span class="token punctuation">,</span> T2 e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">func</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Xp,Be,iu="这个方法存在一个问题，那就是它不支持引用类型。即便<code>func</code>的参数是引用类型的，但是外层<code>emplace_back</code>的参数已经是复制的值。也就说，这里会多一次拷贝。",jp,Qe,ku="于是我们第二个版本将改成这样，把外层的参数也改成引用的：",Ap,Fe,hp,Ii=`<code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">T2</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">emplace_back</span><span class="token punctuation">(</span>T1<span class="token operator">&amp;</span> e1<span class="token punctuation">,</span> T2<span class="token operator">&amp;</span> e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">func</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Op,We,ru="这时又有一个问题：左值引用不能指向右值，所以如果我们这样调用是无法通过编译的：",Sp,Ie,vu="不过const引用是可以指向右值的，所以解决这个问题的办法就是重载：为每个参数定义const和非const两种类型的引用版本，于是乎成了这样：",Kp,Ve,$p,Vi=`<code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">T2</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">emplace_back</span><span class="token punctuation">(</span>T1<span class="token operator">&amp;</span> e1<span class="token punctuation">,</span> T2<span class="token operator">&amp;</span> e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">func</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">T2</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> T1<span class="token operator">&amp;</span> e1<span class="token punctuation">,</span> T2<span class="token operator">&amp;</span> e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">func</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">T2</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">emplace_back</span><span class="token punctuation">(</span>T1<span class="token operator">&amp;</span> e1<span class="token punctuation">,</span> <span class="token keyword">const</span> T2<span class="token operator">&amp;</span> e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">func</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">T2</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> T1<span class="token operator">&amp;</span> e1<span class="token punctuation">,</span> <span class="token keyword">const</span> T2<span class="token operator">&amp;</span> e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">func</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code>`,Bp,f,Nl,mu="5",Yl,Zl,Qp,De,fu="为了解决这个问题，C++11引入了两个新的机制：",Fp,Ge,xu="<li>Reference Collapsing Rules，我不太确定它的正式中文翻译是什么。我们姑且称之为：引用符号折叠规则。</li> <li>特殊类型推导规则，这个与Universal Reference相关。</li>",Wp,Je,_u=`⠀
先说第一个：在C++11中，不存在引用的引用，因此<code>A&amp; &amp;</code>的写法是无法编译的。但在模板类型推导的时候，这是有可能发生的。例如下面这个定义：`,Ip,Ne,Vp,Di=`<code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">baz</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> T<span class="token operator">&amp;</span> k <span class="token operator">=</span> t<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Dp,Ye,Cu="当我们用<code>int&amp;</code>去实例化的时候：",Gp,Ze,Jp,Gi=`<code class="language-cpp"><span class="token keyword">int</span> ii <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token generic-function"><span class="token function">baz</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ii<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Np,ge,du="将<code>T</code>替换成<code>int&amp;</code>，于是<code>k</code>的类型就变成了<code>int&amp; &amp;</code>。甚至于，如果用右值引用<code>int&amp;&amp;</code>代替<code>T</code>的话，<code>k</code>的类型就变成了<code>int&amp;&amp; &amp;</code>。",Yp,tn,wu="所以C++标准定了一些规则，在这种情况下，编译器会执行Reference Collapsing Rules，具体的规则如下：",Zp,en,yu="<li>如果是 <code>A&amp; &amp;</code> 将变成 <code>A&amp;</code></li> <li>如果是 <code>A&amp; &amp;&amp;</code> 将变成 <code>A&amp;</code></li> <li>如果是 <code>A&amp;&amp; &amp;</code> 将变成 <code>A&amp;</code></li> <li>如果是 <code>A&amp;&amp; &amp;&amp;</code> 将变成 <code>A&amp;&amp;</code></li>",gp,nn,Tu=`⠀
简单记忆如下：`,tl,sn,Pu="<li>两个或者三个<code>&amp;</code>都会变成一个<code>&amp;</code></li> <li>四个<code>&amp;</code>都会变成两个<code>&amp;</code></li>",el,an,Lu=`⠀
然后我们再说第二个规则：特殊类型推导规则是在特殊的环境下才会产生的推导规则（这好像是一句话废话）。 要理解这个，还需要再借助另外一个术语：Universal Reference，我们可以简称URef。这应该是Scott Meyers（Scott Meyers是世界顶级的C++软件开发技术权威之一，他的《Effective C++》，《More Effective C++》你应该听说过）创造的名词。`,nl,pn,Hu='关于URef的详细内容可以阅读： <a href="https://paul-pub.oss-cn-beijing.aliyuncs.com/2020/2020-07-cpp-copy-move/URefsCpp11.pdf" rel="nofollow">Scott Meyers 《Universal References in C++11》</a>。',sl,ln,bu="URef的定义如下：",al,on,Mu='<img src="/post-images/uref.png" alt="image4"/>',pl,cn,Eu="就是说：只有声明为<code>T&amp;&amp;</code>且T需要推导的情况下，才是URef。例如<code>void f(Widget&amp;&amp; w);</code>，由于不需要推导，所以它不是URef。",ll,un,Ru="但下面这个代码中，由于模板需要推导，所以它是URef：",ol,kn,cl,Ji=`<code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,ul,rn,zu="如果是URef这种情况，则其具有特殊的推导规则。具体描述如下：",il,vn,qu="<li>如果用类型A的左值初始化URef，则URef会变成左值引用 <code>A&amp;</code></li> <li>如果用类型A的右值初始化URef，则URef会变成右值引用 <code>A&amp;&amp;</code></li>",kl,mn,Uu=`⠀
这个规则有些奇怪。不过这是C++标准定义，编译器执行的规则，所以我们记住它就好。`,rl,fn,Xu="除了这两个规则之外，C++还为我们提供了<code>forward</code>函数，该函数有两个重载的版本，定义如下：",vl,xn,ml,Ni=`<code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span>
T<span class="token operator">&amp;&amp;</span> <span class="token function">forward</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>remove_reference<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span>type<span class="token operator">&amp;</span> t<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&amp;&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span>
T<span class="token operator">&amp;&amp;</span> <span class="token function">forward</span><span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>remove_reference<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span>type<span class="token operator">&amp;&amp;</span> t<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&amp;&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,fl,_n,ju="<code>forward</code>函数依赖<code>&lt;type_traits&gt;</code>头文件中的另外一个结构体<code>remove_reference</code>：",xl,Cn,_l,Yi=`<code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span>
<span class="token keyword">struct</span> <span class="token class-name">remove_reference</span><span class="token punctuation">;</span></code>`,Cl,dn,Au="<code>remove_reference</code>中包含了一个类型成员名称为<code>type</code>:",dl,wn,wl,Zi=`<code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">></span>
<span class="token keyword">using</span> remove_reference_t <span class="token operator">=</span> <span class="token keyword">typename</span> <span class="token class-name">remove_reference</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span>type<span class="token punctuation">;</span></code>`,yl,yn,hu="若类型T为引用类型，则成员<code>type</code>为T所引用的类型。否则<code>type</code>为T本身。例如：",Tl,Tn,Ou="<li><code>std::remove_reference&lt;int&gt;::type</code> 得到<code>int</code></li> <li><code>std::remove_reference&lt;int&amp;&gt;::type</code> 依旧得到<code>int</code></li> <li><code>std::remove_reference&lt;int&amp;&amp;&gt;::type</code> 仍然得到<code>int</code></li>",Pl,Pn,Su=`⠀
回到<code>forward</code>函数，它借助<code>remove_reference</code>将传入的类型强制转换成对应的<code>T&amp;&amp;</code>形式。`,Ll,Ln,Ku="回到我们之前的问题上。我们将<code>emplace_back</code>定义成下面这样：",Hl,Hn,bl,gi='<code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">T2</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">emplace_back</span><span class="token punctuation">(</span>T1<span class="token operator">&amp;&amp;</span> e1<span class="token punctuation">,</span> T2<span class="token operator">&amp;&amp;</span> e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>T1<span class="token operator">></span></span></span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>T2<span class="token operator">></span></span></span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code>',Ml,bn,$u="第一种情况，当我们通过左值去使用它的时候：",El,Mn,Rl,tk=`<code class="language-cpp"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">2.0f</span><span class="token punctuation">;</span>
<span class="token function">emplace_back</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,zl,En,Bu="<code>T</code>替换成<code>int&amp;</code>，<code>emplace_back</code>会变成下面这样：",ql,Rn,Ul,ek='<code class="language-cpp"><span class="token keyword">void</span> <span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token operator">&amp;&amp;</span>e1<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">&amp;</span> <span class="token operator">&amp;&amp;</span>e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code>',Xl,zn,Qu="然后我们选取第一个参数为例（第二个参数是类似的），<code>forward</code>会变成这样：",jl,qn,Al,nk='<code class="language-cpp"><span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">forward</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> t<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token operator">&amp;&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code>',hl,Un,Fu="然后执行引用符号折叠规则，会变成这样：",Ol,Xn,Sl,sk='<code class="language-cpp"><span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token function">forward</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> t<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code>',Kl,jn,Wu="于是调用成功。",$l,An,Iu="另外一种情况，对于<code>emplace_back(1, 2.0f);</code>调用方式，你可以自行推导一下其变化过程。",Bl,hn,Vu="这个过程通过语言来描述很啰嗦，所以下面通过一幅图来说明整个过程，也希望帮你对比记忆：",Ql,On,Du='<img src="/post-images/forward.png" alt="image5"/>',Fl,Sn,Gu="参考资料与推荐读物",Wl,Kn,Ju='<a href="https://paul.pub/cpp-value-category/" rel="nofollow">C++中的值类别</a>';return{c(){v=a("p"),v.textContent=to,Fn=l(),x=a("h2"),x.textContent=eo,Wn=l(),_=a("p"),_.textContent=no,In=l(),C=a("h2"),C.textContent=so,Vn=l(),d=a("p"),d.textContent=ao,Dn=l(),w=a("p"),w.innerHTML=po,Gn=l(),y=a("p"),y.textContent=lo,Jn=l(),T=a("ul"),T.innerHTML=oo,Nn=l(),P=a("p"),P.textContent=co,Yn=l(),L=a("blockquote"),L.innerHTML=uo,Zn=l(),H=a("h2"),H.textContent=io,gn=l(),b=a("p"),b.innerHTML=ko,ts=l(),M=a("p"),M.textContent=ro,es=l(),E=a("pre"),ns=new i(!1),ss=l(),R=a("p"),R.innerHTML=vo,as=l(),z=a("p"),z.textContent=mo,ps=l(),q=a("h2"),q.textContent=fo,ls=l(),U=a("p"),U.innerHTML=xo,os=l(),X=a("p"),X.textContent=_o,cs=l(),j=a("p"),j.innerHTML=Co,us=l(),A=a("p"),A.textContent=wo,is=l(),h=a("p"),h.innerHTML=yo,ks=l(),O=a("h2"),O.textContent=To,rs=l(),S=a("p"),S.textContent=Po,vs=l(),K=a("p"),K.textContent=Lo,ms=l(),$=a("p"),$.textContent=Ho,fs=l(),B=a("ul"),B.innerHTML=bo,xs=l(),Q=a("p"),Q.textContent=Mo,_s=l(),F=a("p"),F.textContent=Eo,Cs=l(),W=a("ul"),W.innerHTML=Ro,ds=l(),I=a("p"),I.textContent=zo,ws=l(),V=a("ul"),V.innerHTML=qo,ys=l(),D=a("p"),D.textContent=Uo,Ts=l(),G=a("table"),G.innerHTML=Xo,Ps=l(),J=a("blockquote"),J.innerHTML=jo,Ls=l(),N=a("p"),N.textContent=Ao,Hs=l(),Y=a("p"),Y.innerHTML=ho,bs=l(),Z=a("p"),Z.textContent=Oo,Ms=l(),g=a("h2"),g.textContent=So,Es=l(),tt=a("p"),tt.textContent=Ko,Rs=l(),et=a("p"),et.textContent=$o,zs=l(),nt=a("ul"),nt.innerHTML=Bo,qs=l(),st=a("p"),st.textContent=Qo,Us=l(),at=a("h2"),at.textContent=Fo,Xs=l(),pt=a("p"),pt.textContent=Wo,js=l(),lt=a("p"),lt.textContent=Io,As=l(),ot=a("ul"),ot.innerHTML=Vo,hs=l(),ct=a("p"),ct.textContent=Do,Os=l(),ut=a("h2"),ut.textContent=Go,Ss=l(),it=a("p"),it.textContent=Jo,Ks=l(),kt=a("p"),kt.textContent=No,$s=l(),rt=a("pre"),Bs=new i(!1),Qs=l(),vt=a("p"),vt.textContent=Yo,Fs=l(),mt=a("ul"),mt.innerHTML=Zo,Ws=l(),ft=a("p"),ft.textContent=go,Is=l(),xt=a("h2"),xt.textContent=tc,Vs=l(),_t=a("p"),_t.textContent=ec,Ds=l(),Ct=a("p"),Ct.textContent=nc,Gs=l(),dt=a("pre"),Js=new i(!1),Ns=l(),wt=a("p"),wt.textContent=sc,Ys=l(),yt=a("ul"),yt.innerHTML=ac,Zs=l(),Tt=a("p"),Tt.textContent=pc,gs=l(),Pt=a("h2"),Pt.textContent=lc,ta=l(),Lt=a("p"),Lt.textContent=oc,ea=l(),Ht=a("p"),Ht.textContent=cc,na=l(),bt=a("blockquote"),bt.innerHTML=uc,sa=l(),Mt=a("pre"),aa=new i(!1),pa=l(),Et=a("p"),Et.textContent=ic,la=l(),Rt=a("h2"),Rt.textContent=kc,oa=l(),zt=a("blockquote"),zt.innerHTML=rc,ca=l(),qt=a("p"),qt.textContent=vc,ua=l(),Ut=a("p"),Ut.textContent=mc,ia=l(),Xt=a("p"),Xt.textContent=fc,ka=l(),jt=a("p"),jt.textContent=xc,ra=l(),At=a("pre"),va=new i(!1),ma=l(),ht=a("p"),ht.textContent=_c,fa=l(),Ot=a("p"),Ot.textContent=Cc,xa=l(),St=a("p"),St.textContent=dc,_a=l(),Kt=a("p"),Kt.innerHTML=wc,Ca=l(),$t=a("p"),$t.textContent=yc,da=l(),Bt=a("p"),Bt.textContent=Tc,wa=l(),Qt=a("pre"),ya=new i(!1),Ta=l(),Ft=a("p"),Ft.innerHTML=Pc,Pa=l(),Wt=a("p"),Wt.textContent=Lc,La=l(),It=a("pre"),Ha=new i(!1),ba=l(),Vt=a("p"),Vt.textContent=Hc,Ma=l(),Dt=a("pre"),Ea=new i(!1),Ra=l(),Gt=a("p"),Gt.textContent=bc,za=l(),Jt=a("pre"),qa=new i(!1),Ua=l(),Nt=a("p"),Nt.textContent=Mc,Xa=l(),Yt=a("ul"),Yt.innerHTML=Ec,ja=l(),Zt=a("p"),Zt.innerHTML=Rc,Aa=l(),gt=a("p"),gt.textContent=zc,ha=l(),te=a("ul"),te.innerHTML=qc,Oa=l(),ee=a("p"),ee.textContent=Uc,Sa=l(),ne=a("h2"),ne.textContent=Xc,Ka=l(),se=a("p"),se.textContent=jc,$a=l(),ae=a("p"),ae.textContent=Ac,Ba=l(),pe=a("pre"),Qa=new i(!1),Fa=l(),le=a("blockquote"),le.innerHTML=hc,Wa=l(),m=a("p"),Dl=$n("拷贝意味着会将原先的数据复制一份新的出来。这么做的好处是：新的数据与原先的数据是独立的两份，修改其中一个不会影响另外一个。但坏处是：这么做会消耗运算时间和存储空间。例如：你有一个包含了$10^"),Gl=$n(Oc),Jl=$n("$个元素的集合数据，将其拷贝一份就不那么轻松了。"),Ia=l(),oe=a("p"),oe.innerHTML=Sc,Va=l(),ce=a("p"),ce.textContent=Kc,Da=l(),ue=a("p"),ue.innerHTML=$c,Ga=l(),ie=a("p"),ie.textContent=Bc,Ja=l(),ke=a("pre"),Na=new i(!1),Ya=l(),re=a("p"),re.textContent=Qc,Za=l(),ve=a("p"),ve.textContent=Fc,ga=l(),me=a("pre"),tp=new i(!1),ep=l(),fe=a("p"),fe.textContent=Wc,np=l(),xe=a("ol"),xe.innerHTML=Ic,sp=l(),_e=a("p"),_e.textContent=Vc,ap=l(),Ce=a("pre"),pp=new i(!1),lp=l(),de=a("p"),de.textContent=Dc,op=l(),we=a("p"),we.textContent=Gc,cp=l(),ye=a("p"),ye.innerHTML=Jc,up=l(),Te=a("p"),Te.innerHTML=Nc,ip=l(),Pe=a("p"),Pe.innerHTML=Yc,kp=l(),Le=a("pre"),rp=new i(!1),vp=l(),He=a("p"),He.innerHTML=Zc,mp=l(),be=a("p"),be.textContent=gc,fp=l(),Me=a("pre"),xp=new i(!1),_p=l(),Ee=a("p"),Ee.textContent=tu,Cp=l(),Re=a("h2"),Re.textContent=eu,dp=l(),ze=a("p"),ze.innerHTML=nu,wp=l(),qe=a("p"),qe.textContent=su,yp=l(),Ue=a("p"),Ue.innerHTML=au,Tp=l(),Xe=a("pre"),Pp=new i(!1),Lp=l(),je=a("p"),je.innerHTML=pu,Hp=l(),Ae=a("p"),Ae.innerHTML=lu,bp=l(),he=a("pre"),Mp=new i(!1),Ep=l(),Oe=a("p"),Oe.innerHTML=ou,Rp=l(),Se=a("p"),Se.innerHTML=cu,zp=l(),Ke=a("p"),Ke.textContent=uu,qp=l(),$e=a("pre"),Up=new i(!1),Xp=l(),Be=a("p"),Be.innerHTML=iu,jp=l(),Qe=a("p"),Qe.textContent=ku,Ap=l(),Fe=a("pre"),hp=new i(!1),Op=l(),We=a("p"),We.textContent=ru,Sp=l(),Ie=a("p"),Ie.textContent=vu,Kp=l(),Ve=a("pre"),$p=new i(!1),Bp=l(),f=a("p"),Nl=$n("很显然，你马上就意识好像不太对劲。如果是2个参数，需要定义四个重载的版本。那如果是5个参数呢？需要$2^"),Yl=$n(mu),Zl=$n("=32$的版本。如果是10个参数呢？？?"),Qp=l(),De=a("p"),De.textContent=fu,Fp=l(),Ge=a("ol"),Ge.innerHTML=xu,Wp=l(),Je=a("p"),Je.innerHTML=_u,Ip=l(),Ne=a("pre"),Vp=new i(!1),Dp=l(),Ye=a("p"),Ye.innerHTML=Cu,Gp=l(),Ze=a("pre"),Jp=new i(!1),Np=l(),ge=a("p"),ge.innerHTML=du,Yp=l(),tn=a("p"),tn.textContent=wu,Zp=l(),en=a("ul"),en.innerHTML=yu,gp=l(),nn=a("p"),nn.textContent=Tu,tl=l(),sn=a("ul"),sn.innerHTML=Pu,el=l(),an=a("p"),an.textContent=Lu,nl=l(),pn=a("p"),pn.innerHTML=Hu,sl=l(),ln=a("p"),ln.textContent=bu,al=l(),on=a("p"),on.innerHTML=Mu,pl=l(),cn=a("p"),cn.innerHTML=Eu,ll=l(),un=a("p"),un.textContent=Ru,ol=l(),kn=a("pre"),cl=new i(!1),ul=l(),rn=a("p"),rn.textContent=zu,il=l(),vn=a("ul"),vn.innerHTML=qu,kl=l(),mn=a("p"),mn.textContent=Uu,rl=l(),fn=a("p"),fn.innerHTML=Xu,vl=l(),xn=a("pre"),ml=new i(!1),fl=l(),_n=a("p"),_n.innerHTML=ju,xl=l(),Cn=a("pre"),_l=new i(!1),Cl=l(),dn=a("p"),dn.innerHTML=Au,dl=l(),wn=a("pre"),wl=new i(!1),yl=l(),yn=a("p"),yn.innerHTML=hu,Tl=l(),Tn=a("ul"),Tn.innerHTML=Ou,Pl=l(),Pn=a("p"),Pn.innerHTML=Su,Ll=l(),Ln=a("p"),Ln.innerHTML=Ku,Hl=l(),Hn=a("pre"),bl=new i(!1),Ml=l(),bn=a("p"),bn.textContent=$u,El=l(),Mn=a("pre"),Rl=new i(!1),zl=l(),En=a("p"),En.innerHTML=Bu,ql=l(),Rn=a("pre"),Ul=new i(!1),Xl=l(),zn=a("p"),zn.innerHTML=Qu,jl=l(),qn=a("pre"),Al=new i(!1),hl=l(),Un=a("p"),Un.textContent=Fu,Ol=l(),Xn=a("pre"),Sl=new i(!1),Kl=l(),jn=a("p"),jn.textContent=Wu,$l=l(),An=a("p"),An.innerHTML=Iu,Bl=l(),hn=a("p"),hn.textContent=Vu,Ql=l(),On=a("p"),On.innerHTML=Du,Fl=l(),Sn=a("h2"),Sn.textContent=Gu,Wl=l(),Kn=a("p"),Kn.innerHTML=Ju,this.h()},l(t){v=p(t,"P",{"data-svelte-h":!0}),c(v)!=="svelte-1jif6gp"&&(v.textContent=to),Fn=o(t),x=p(t,"H2",{"data-svelte-h":!0}),c(x)!=="svelte-1wiu2u3"&&(x.textContent=eo),Wn=o(t),_=p(t,"P",{"data-svelte-h":!0}),c(_)!=="svelte-18b73b3"&&(_.textContent=no),In=o(t),C=p(t,"H2",{"data-svelte-h":!0}),c(C)!=="svelte-74gb97"&&(C.textContent=so),Vn=o(t),d=p(t,"P",{"data-svelte-h":!0}),c(d)!=="svelte-wp3nrc"&&(d.textContent=ao),Dn=o(t),w=p(t,"P",{"data-svelte-h":!0}),c(w)!=="svelte-1b5xxra"&&(w.innerHTML=po),Gn=o(t),y=p(t,"P",{"data-svelte-h":!0}),c(y)!=="svelte-ow824m"&&(y.textContent=lo),Jn=o(t),T=p(t,"UL",{"data-svelte-h":!0}),c(T)!=="svelte-dyvvas"&&(T.innerHTML=oo),Nn=o(t),P=p(t,"P",{"data-svelte-h":!0}),c(P)!=="svelte-1fg3kw8"&&(P.textContent=co),Yn=o(t),L=p(t,"BLOCKQUOTE",{"data-svelte-h":!0}),c(L)!=="svelte-1x9de7y"&&(L.innerHTML=uo),Zn=o(t),H=p(t,"H2",{"data-svelte-h":!0}),c(H)!=="svelte-1eyomnr"&&(H.textContent=io),gn=o(t),b=p(t,"P",{"data-svelte-h":!0}),c(b)!=="svelte-14fila8"&&(b.innerHTML=ko),ts=o(t),M=p(t,"P",{"data-svelte-h":!0}),c(M)!=="svelte-1xncu27"&&(M.textContent=ro),es=o(t),E=p(t,"PRE",{class:!0});var n=u(E);ns=k(n,!1),n.forEach(e),ss=o(t),R=p(t,"P",{"data-svelte-h":!0}),c(R)!=="svelte-1so52ri"&&(R.innerHTML=vo),as=o(t),z=p(t,"P",{"data-svelte-h":!0}),c(z)!=="svelte-l096ke"&&(z.textContent=mo),ps=o(t),q=p(t,"H2",{"data-svelte-h":!0}),c(q)!=="svelte-fndswg"&&(q.textContent=fo),ls=o(t),U=p(t,"P",{"data-svelte-h":!0}),c(U)!=="svelte-1natae4"&&(U.innerHTML=xo),os=o(t),X=p(t,"P",{"data-svelte-h":!0}),c(X)!=="svelte-1l4n4mx"&&(X.textContent=_o),cs=o(t),j=p(t,"P",{"data-svelte-h":!0}),c(j)!=="svelte-j3gtre"&&(j.innerHTML=Co),us=o(t),A=p(t,"P",{"data-svelte-h":!0}),c(A)!=="svelte-fel0l7"&&(A.textContent=wo),is=o(t),h=p(t,"P",{"data-svelte-h":!0}),c(h)!=="svelte-1pnu4wu"&&(h.innerHTML=yo),ks=o(t),O=p(t,"H2",{"data-svelte-h":!0}),c(O)!=="svelte-1lk2zfc"&&(O.textContent=To),rs=o(t),S=p(t,"P",{"data-svelte-h":!0}),c(S)!=="svelte-8qtk3v"&&(S.textContent=Po),vs=o(t),K=p(t,"P",{"data-svelte-h":!0}),c(K)!=="svelte-145j1ia"&&(K.textContent=Lo),ms=o(t),$=p(t,"P",{"data-svelte-h":!0}),c($)!=="svelte-1fdqwcu"&&($.textContent=Ho),fs=o(t),B=p(t,"UL",{"data-svelte-h":!0}),c(B)!=="svelte-1ay4qgh"&&(B.innerHTML=bo),xs=o(t),Q=p(t,"P",{"data-svelte-h":!0}),c(Q)!=="svelte-5bu0fc"&&(Q.textContent=Mo),_s=o(t),F=p(t,"P",{"data-svelte-h":!0}),c(F)!=="svelte-ibmlmy"&&(F.textContent=Eo),Cs=o(t),W=p(t,"UL",{"data-svelte-h":!0}),c(W)!=="svelte-yoa75y"&&(W.innerHTML=Ro),ds=o(t),I=p(t,"P",{"data-svelte-h":!0}),c(I)!=="svelte-qatyqk"&&(I.textContent=zo),ws=o(t),V=p(t,"UL",{"data-svelte-h":!0}),c(V)!=="svelte-orhxl7"&&(V.innerHTML=qo),ys=o(t),D=p(t,"P",{"data-svelte-h":!0}),c(D)!=="svelte-1iz0n6c"&&(D.textContent=Uo),Ts=o(t),G=p(t,"TABLE",{"data-svelte-h":!0}),c(G)!=="svelte-7qzbn3"&&(G.innerHTML=Xo),Ps=o(t),J=p(t,"BLOCKQUOTE",{"data-svelte-h":!0}),c(J)!=="svelte-9bnjz8"&&(J.innerHTML=jo),Ls=o(t),N=p(t,"P",{"data-svelte-h":!0}),c(N)!=="svelte-1tpewue"&&(N.textContent=Ao),Hs=o(t),Y=p(t,"P",{"data-svelte-h":!0}),c(Y)!=="svelte-1bhh8b8"&&(Y.innerHTML=ho),bs=o(t),Z=p(t,"P",{"data-svelte-h":!0}),c(Z)!=="svelte-c6utm1"&&(Z.textContent=Oo),Ms=o(t),g=p(t,"H2",{"data-svelte-h":!0}),c(g)!=="svelte-1gi6kem"&&(g.textContent=So),Es=o(t),tt=p(t,"P",{"data-svelte-h":!0}),c(tt)!=="svelte-14peliv"&&(tt.textContent=Ko),Rs=o(t),et=p(t,"P",{"data-svelte-h":!0}),c(et)!=="svelte-1kt479z"&&(et.textContent=$o),zs=o(t),nt=p(t,"UL",{"data-svelte-h":!0}),c(nt)!=="svelte-13yft1b"&&(nt.innerHTML=Bo),qs=o(t),st=p(t,"P",{"data-svelte-h":!0}),c(st)!=="svelte-1fg3kw8"&&(st.textContent=Qo),Us=o(t),at=p(t,"H2",{"data-svelte-h":!0}),c(at)!=="svelte-1e6x605"&&(at.textContent=Fo),Xs=o(t),pt=p(t,"P",{"data-svelte-h":!0}),c(pt)!=="svelte-g4gav6"&&(pt.textContent=Wo),js=o(t),lt=p(t,"P",{"data-svelte-h":!0}),c(lt)!=="svelte-14s7vb1"&&(lt.textContent=Io),As=o(t),ot=p(t,"UL",{"data-svelte-h":!0}),c(ot)!=="svelte-1bzc6tl"&&(ot.innerHTML=Vo),hs=o(t),ct=p(t,"P",{"data-svelte-h":!0}),c(ct)!=="svelte-1330jxo"&&(ct.textContent=Do),Os=o(t),ut=p(t,"H2",{"data-svelte-h":!0}),c(ut)!=="svelte-1dronuj"&&(ut.textContent=Go),Ss=o(t),it=p(t,"P",{"data-svelte-h":!0}),c(it)!=="svelte-1wmyyxu"&&(it.textContent=Jo),Ks=o(t),kt=p(t,"P",{"data-svelte-h":!0}),c(kt)!=="svelte-iuxuer"&&(kt.textContent=No),$s=o(t),rt=p(t,"PRE",{class:!0});var Nu=u(rt);Bs=k(Nu,!1),Nu.forEach(e),Qs=o(t),vt=p(t,"P",{"data-svelte-h":!0}),c(vt)!=="svelte-14s6hk3"&&(vt.textContent=Yo),Fs=o(t),mt=p(t,"UL",{"data-svelte-h":!0}),c(mt)!=="svelte-jaynmp"&&(mt.innerHTML=Zo),Ws=o(t),ft=p(t,"P",{"data-svelte-h":!0}),c(ft)!=="svelte-1fg3kw8"&&(ft.textContent=go),Is=o(t),xt=p(t,"H2",{"data-svelte-h":!0}),c(xt)!=="svelte-1r6cetn"&&(xt.textContent=tc),Vs=o(t),_t=p(t,"P",{"data-svelte-h":!0}),c(_t)!=="svelte-1b8a4kp"&&(_t.textContent=ec),Ds=o(t),Ct=p(t,"P",{"data-svelte-h":!0}),c(Ct)!=="svelte-18vsbp4"&&(Ct.textContent=nc),Gs=o(t),dt=p(t,"PRE",{class:!0});var Yu=u(dt);Js=k(Yu,!1),Yu.forEach(e),Ns=o(t),wt=p(t,"P",{"data-svelte-h":!0}),c(wt)!=="svelte-1kqy0nn"&&(wt.textContent=sc),Ys=o(t),yt=p(t,"UL",{"data-svelte-h":!0}),c(yt)!=="svelte-upeaav"&&(yt.innerHTML=ac),Zs=o(t),Tt=p(t,"P",{"data-svelte-h":!0}),c(Tt)!=="svelte-1fg3kw8"&&(Tt.textContent=pc),gs=o(t),Pt=p(t,"H2",{"data-svelte-h":!0}),c(Pt)!=="svelte-1e3eqwf"&&(Pt.textContent=lc),ta=o(t),Lt=p(t,"P",{"data-svelte-h":!0}),c(Lt)!=="svelte-bgxqvu"&&(Lt.textContent=oc),ea=o(t),Ht=p(t,"P",{"data-svelte-h":!0}),c(Ht)!=="svelte-83c72i"&&(Ht.textContent=cc),na=o(t),bt=p(t,"BLOCKQUOTE",{"data-svelte-h":!0}),c(bt)!=="svelte-yjy0da"&&(bt.innerHTML=uc),sa=o(t),Mt=p(t,"PRE",{class:!0});var Zu=u(Mt);aa=k(Zu,!1),Zu.forEach(e),pa=o(t),Et=p(t,"P",{"data-svelte-h":!0}),c(Et)!=="svelte-1vjgttu"&&(Et.textContent=ic),la=o(t),Rt=p(t,"H2",{"data-svelte-h":!0}),c(Rt)!=="svelte-hwxkvp"&&(Rt.textContent=kc),oa=o(t),zt=p(t,"BLOCKQUOTE",{"data-svelte-h":!0}),c(zt)!=="svelte-e70twe"&&(zt.innerHTML=rc),ca=o(t),qt=p(t,"P",{"data-svelte-h":!0}),c(qt)!=="svelte-1tdrwte"&&(qt.textContent=vc),ua=o(t),Ut=p(t,"P",{"data-svelte-h":!0}),c(Ut)!=="svelte-qfekow"&&(Ut.textContent=mc),ia=o(t),Xt=p(t,"P",{"data-svelte-h":!0}),c(Xt)!=="svelte-pcrt8l"&&(Xt.textContent=fc),ka=o(t),jt=p(t,"P",{"data-svelte-h":!0}),c(jt)!=="svelte-gckl22"&&(jt.textContent=xc),ra=o(t),At=p(t,"PRE",{class:!0});var gu=u(At);va=k(gu,!1),gu.forEach(e),ma=o(t),ht=p(t,"P",{"data-svelte-h":!0}),c(ht)!=="svelte-6el1x1"&&(ht.textContent=_c),fa=o(t),Ot=p(t,"P",{"data-svelte-h":!0}),c(Ot)!=="svelte-vg24bj"&&(Ot.textContent=Cc),xa=o(t),St=p(t,"P",{"data-svelte-h":!0}),c(St)!=="svelte-ot27vl"&&(St.textContent=dc),_a=o(t),Kt=p(t,"P",{"data-svelte-h":!0}),c(Kt)!=="svelte-81y1pu"&&(Kt.innerHTML=wc),Ca=o(t),$t=p(t,"P",{"data-svelte-h":!0}),c($t)!=="svelte-9tpocg"&&($t.textContent=yc),da=o(t),Bt=p(t,"P",{"data-svelte-h":!0}),c(Bt)!=="svelte-j60871"&&(Bt.textContent=Tc),wa=o(t),Qt=p(t,"PRE",{class:!0});var ti=u(Qt);ya=k(ti,!1),ti.forEach(e),Ta=o(t),Ft=p(t,"P",{"data-svelte-h":!0}),c(Ft)!=="svelte-5r3id4"&&(Ft.innerHTML=Pc),Pa=o(t),Wt=p(t,"P",{"data-svelte-h":!0}),c(Wt)!=="svelte-10hlhp9"&&(Wt.textContent=Lc),La=o(t),It=p(t,"PRE",{class:!0});var ei=u(It);Ha=k(ei,!1),ei.forEach(e),ba=o(t),Vt=p(t,"P",{"data-svelte-h":!0}),c(Vt)!=="svelte-1gav8mq"&&(Vt.textContent=Hc),Ma=o(t),Dt=p(t,"PRE",{class:!0});var ni=u(Dt);Ea=k(ni,!1),ni.forEach(e),Ra=o(t),Gt=p(t,"P",{"data-svelte-h":!0}),c(Gt)!=="svelte-ayxofe"&&(Gt.textContent=bc),za=o(t),Jt=p(t,"PRE",{class:!0});var si=u(Jt);qa=k(si,!1),si.forEach(e),Ua=o(t),Nt=p(t,"P",{"data-svelte-h":!0}),c(Nt)!=="svelte-11628w6"&&(Nt.textContent=Mc),Xa=o(t),Yt=p(t,"UL",{"data-svelte-h":!0}),c(Yt)!=="svelte-gber7f"&&(Yt.innerHTML=Ec),ja=o(t),Zt=p(t,"P",{"data-svelte-h":!0}),c(Zt)!=="svelte-ghm0a9"&&(Zt.innerHTML=Rc),Aa=o(t),gt=p(t,"P",{"data-svelte-h":!0}),c(gt)!=="svelte-huiwur"&&(gt.textContent=zc),ha=o(t),te=p(t,"UL",{"data-svelte-h":!0}),c(te)!=="svelte-hgjrqc"&&(te.innerHTML=qc),Oa=o(t),ee=p(t,"P",{"data-svelte-h":!0}),c(ee)!=="svelte-183lb1q"&&(ee.textContent=Uc),Sa=o(t),ne=p(t,"H2",{"data-svelte-h":!0}),c(ne)!=="svelte-s84vrn"&&(ne.textContent=Xc),Ka=o(t),se=p(t,"P",{"data-svelte-h":!0}),c(se)!=="svelte-pmskaz"&&(se.textContent=jc),$a=o(t),ae=p(t,"P",{"data-svelte-h":!0}),c(ae)!=="svelte-15t0le1"&&(ae.textContent=Ac),Ba=o(t),pe=p(t,"PRE",{class:!0});var ai=u(pe);Qa=k(ai,!1),ai.forEach(e),Fa=o(t),le=p(t,"BLOCKQUOTE",{"data-svelte-h":!0}),c(le)!=="svelte-6frf41"&&(le.innerHTML=hc),Wa=o(t),m=p(t,"P",{});var Il=u(m);Dl=Bn(Il,"拷贝意味着会将原先的数据复制一份新的出来。这么做的好处是：新的数据与原先的数据是独立的两份，修改其中一个不会影响另外一个。但坏处是：这么做会消耗运算时间和存储空间。例如：你有一个包含了$10^"),Gl=Bn(Il,Oc),Jl=Bn(Il,"$个元素的集合数据，将其拷贝一份就不那么轻松了。"),Il.forEach(e),Ia=o(t),oe=p(t,"P",{"data-svelte-h":!0}),c(oe)!=="svelte-icp4re"&&(oe.innerHTML=Sc),Va=o(t),ce=p(t,"P",{"data-svelte-h":!0}),c(ce)!=="svelte-hc5hxm"&&(ce.textContent=Kc),Da=o(t),ue=p(t,"P",{"data-svelte-h":!0}),c(ue)!=="svelte-t6lxlb"&&(ue.innerHTML=$c),Ga=o(t),ie=p(t,"P",{"data-svelte-h":!0}),c(ie)!=="svelte-1cr9v7n"&&(ie.textContent=Bc),Ja=o(t),ke=p(t,"PRE",{class:!0});var pi=u(ke);Na=k(pi,!1),pi.forEach(e),Ya=o(t),re=p(t,"P",{"data-svelte-h":!0}),c(re)!=="svelte-1jy96la"&&(re.textContent=Qc),Za=o(t),ve=p(t,"P",{"data-svelte-h":!0}),c(ve)!=="svelte-wlv6hd"&&(ve.textContent=Fc),ga=o(t),me=p(t,"PRE",{class:!0});var li=u(me);tp=k(li,!1),li.forEach(e),ep=o(t),fe=p(t,"P",{"data-svelte-h":!0}),c(fe)!=="svelte-i4wtzx"&&(fe.textContent=Wc),np=o(t),xe=p(t,"OL",{"data-svelte-h":!0}),c(xe)!=="svelte-160urpd"&&(xe.innerHTML=Ic),sp=o(t),_e=p(t,"P",{"data-svelte-h":!0}),c(_e)!=="svelte-8zhw65"&&(_e.textContent=Vc),ap=o(t),Ce=p(t,"PRE",{class:!0});var oi=u(Ce);pp=k(oi,!1),oi.forEach(e),lp=o(t),de=p(t,"P",{"data-svelte-h":!0}),c(de)!=="svelte-15pmcgw"&&(de.textContent=Dc),op=o(t),we=p(t,"P",{"data-svelte-h":!0}),c(we)!=="svelte-dbxoua"&&(we.textContent=Gc),cp=o(t),ye=p(t,"P",{"data-svelte-h":!0}),c(ye)!=="svelte-144480e"&&(ye.innerHTML=Jc),up=o(t),Te=p(t,"P",{"data-svelte-h":!0}),c(Te)!=="svelte-x0d4dx"&&(Te.innerHTML=Nc),ip=o(t),Pe=p(t,"P",{"data-svelte-h":!0}),c(Pe)!=="svelte-10v21w8"&&(Pe.innerHTML=Yc),kp=o(t),Le=p(t,"PRE",{class:!0});var ci=u(Le);rp=k(ci,!1),ci.forEach(e),vp=o(t),He=p(t,"P",{"data-svelte-h":!0}),c(He)!=="svelte-vbr9wt"&&(He.innerHTML=Zc),mp=o(t),be=p(t,"P",{"data-svelte-h":!0}),c(be)!=="svelte-1l7ntcf"&&(be.textContent=gc),fp=o(t),Me=p(t,"PRE",{class:!0});var ui=u(Me);xp=k(ui,!1),ui.forEach(e),_p=o(t),Ee=p(t,"P",{"data-svelte-h":!0}),c(Ee)!=="svelte-sdi1uq"&&(Ee.textContent=tu),Cp=o(t),Re=p(t,"H2",{"data-svelte-h":!0}),c(Re)!=="svelte-4oysx6"&&(Re.textContent=eu),dp=o(t),ze=p(t,"P",{"data-svelte-h":!0}),c(ze)!=="svelte-t91nvm"&&(ze.innerHTML=nu),wp=o(t),qe=p(t,"P",{"data-svelte-h":!0}),c(qe)!=="svelte-ciwe"&&(qe.textContent=su),yp=o(t),Ue=p(t,"P",{"data-svelte-h":!0}),c(Ue)!=="svelte-1xrs4ub"&&(Ue.innerHTML=au),Tp=o(t),Xe=p(t,"PRE",{class:!0});var ii=u(Xe);Pp=k(ii,!1),ii.forEach(e),Lp=o(t),je=p(t,"P",{"data-svelte-h":!0}),c(je)!=="svelte-1vw2oxd"&&(je.innerHTML=pu),Hp=o(t),Ae=p(t,"P",{"data-svelte-h":!0}),c(Ae)!=="svelte-86wn45"&&(Ae.innerHTML=lu),bp=o(t),he=p(t,"PRE",{class:!0});var ki=u(he);Mp=k(ki,!1),ki.forEach(e),Ep=o(t),Oe=p(t,"P",{"data-svelte-h":!0}),c(Oe)!=="svelte-kbjxgn"&&(Oe.innerHTML=ou),Rp=o(t),Se=p(t,"P",{"data-svelte-h":!0}),c(Se)!=="svelte-e2juu2"&&(Se.innerHTML=cu),zp=o(t),Ke=p(t,"P",{"data-svelte-h":!0}),c(Ke)!=="svelte-quinw0"&&(Ke.textContent=uu),qp=o(t),$e=p(t,"PRE",{class:!0});var ri=u($e);Up=k(ri,!1),ri.forEach(e),Xp=o(t),Be=p(t,"P",{"data-svelte-h":!0}),c(Be)!=="svelte-1f61cbo"&&(Be.innerHTML=iu),jp=o(t),Qe=p(t,"P",{"data-svelte-h":!0}),c(Qe)!=="svelte-aniu0o"&&(Qe.textContent=ku),Ap=o(t),Fe=p(t,"PRE",{class:!0});var vi=u(Fe);hp=k(vi,!1),vi.forEach(e),Op=o(t),We=p(t,"P",{"data-svelte-h":!0}),c(We)!=="svelte-ngabnb"&&(We.textContent=ru),Sp=o(t),Ie=p(t,"P",{"data-svelte-h":!0}),c(Ie)!=="svelte-nvbi9m"&&(Ie.textContent=vu),Kp=o(t),Ve=p(t,"PRE",{class:!0});var mi=u(Ve);$p=k(mi,!1),mi.forEach(e),Bp=o(t),f=p(t,"P",{});var Vl=u(f);Nl=Bn(Vl,"很显然，你马上就意识好像不太对劲。如果是2个参数，需要定义四个重载的版本。那如果是5个参数呢？需要$2^"),Yl=Bn(Vl,mu),Zl=Bn(Vl,"=32$的版本。如果是10个参数呢？？?"),Vl.forEach(e),Qp=o(t),De=p(t,"P",{"data-svelte-h":!0}),c(De)!=="svelte-1r7kzoy"&&(De.textContent=fu),Fp=o(t),Ge=p(t,"OL",{"data-svelte-h":!0}),c(Ge)!=="svelte-19cdyeq"&&(Ge.innerHTML=xu),Wp=o(t),Je=p(t,"P",{"data-svelte-h":!0}),c(Je)!=="svelte-1aaortc"&&(Je.innerHTML=_u),Ip=o(t),Ne=p(t,"PRE",{class:!0});var fi=u(Ne);Vp=k(fi,!1),fi.forEach(e),Dp=o(t),Ye=p(t,"P",{"data-svelte-h":!0}),c(Ye)!=="svelte-1x7qgi7"&&(Ye.innerHTML=Cu),Gp=o(t),Ze=p(t,"PRE",{class:!0});var xi=u(Ze);Jp=k(xi,!1),xi.forEach(e),Np=o(t),ge=p(t,"P",{"data-svelte-h":!0}),c(ge)!=="svelte-6mvjgc"&&(ge.innerHTML=du),Yp=o(t),tn=p(t,"P",{"data-svelte-h":!0}),c(tn)!=="svelte-1eve232"&&(tn.textContent=wu),Zp=o(t),en=p(t,"UL",{"data-svelte-h":!0}),c(en)!=="svelte-13wzqa0"&&(en.innerHTML=yu),gp=o(t),nn=p(t,"P",{"data-svelte-h":!0}),c(nn)!=="svelte-bcbr06"&&(nn.textContent=Tu),tl=o(t),sn=p(t,"UL",{"data-svelte-h":!0}),c(sn)!=="svelte-5dz2w3"&&(sn.innerHTML=Pu),el=o(t),an=p(t,"P",{"data-svelte-h":!0}),c(an)!=="svelte-56k9n8"&&(an.textContent=Lu),nl=o(t),pn=p(t,"P",{"data-svelte-h":!0}),c(pn)!=="svelte-8fannj"&&(pn.innerHTML=Hu),sl=o(t),ln=p(t,"P",{"data-svelte-h":!0}),c(ln)!=="svelte-8e6wxc"&&(ln.textContent=bu),al=o(t),on=p(t,"P",{"data-svelte-h":!0}),c(on)!=="svelte-1sqau49"&&(on.innerHTML=Mu),pl=o(t),cn=p(t,"P",{"data-svelte-h":!0}),c(cn)!=="svelte-fmq73a"&&(cn.innerHTML=Eu),ll=o(t),un=p(t,"P",{"data-svelte-h":!0}),c(un)!=="svelte-1r8q52s"&&(un.textContent=Ru),ol=o(t),kn=p(t,"PRE",{class:!0});var _i=u(kn);cl=k(_i,!1),_i.forEach(e),ul=o(t),rn=p(t,"P",{"data-svelte-h":!0}),c(rn)!=="svelte-1gtfwau"&&(rn.textContent=zu),il=o(t),vn=p(t,"UL",{"data-svelte-h":!0}),c(vn)!=="svelte-p4kgys"&&(vn.innerHTML=qu),kl=o(t),mn=p(t,"P",{"data-svelte-h":!0}),c(mn)!=="svelte-3g69gl"&&(mn.textContent=Uu),rl=o(t),fn=p(t,"P",{"data-svelte-h":!0}),c(fn)!=="svelte-2af29k"&&(fn.innerHTML=Xu),vl=o(t),xn=p(t,"PRE",{class:!0});var Ci=u(xn);ml=k(Ci,!1),Ci.forEach(e),fl=o(t),_n=p(t,"P",{"data-svelte-h":!0}),c(_n)!=="svelte-eb4qwv"&&(_n.innerHTML=ju),xl=o(t),Cn=p(t,"PRE",{class:!0});var di=u(Cn);_l=k(di,!1),di.forEach(e),Cl=o(t),dn=p(t,"P",{"data-svelte-h":!0}),c(dn)!=="svelte-oep22s"&&(dn.innerHTML=Au),dl=o(t),wn=p(t,"PRE",{class:!0});var wi=u(wn);wl=k(wi,!1),wi.forEach(e),yl=o(t),yn=p(t,"P",{"data-svelte-h":!0}),c(yn)!=="svelte-d8hkt5"&&(yn.innerHTML=hu),Tl=o(t),Tn=p(t,"UL",{"data-svelte-h":!0}),c(Tn)!=="svelte-gu30pb"&&(Tn.innerHTML=Ou),Pl=o(t),Pn=p(t,"P",{"data-svelte-h":!0}),c(Pn)!=="svelte-127r75l"&&(Pn.innerHTML=Su),Ll=o(t),Ln=p(t,"P",{"data-svelte-h":!0}),c(Ln)!=="svelte-2q9p8e"&&(Ln.innerHTML=Ku),Hl=o(t),Hn=p(t,"PRE",{class:!0});var yi=u(Hn);bl=k(yi,!1),yi.forEach(e),Ml=o(t),bn=p(t,"P",{"data-svelte-h":!0}),c(bn)!=="svelte-109pz3a"&&(bn.textContent=$u),El=o(t),Mn=p(t,"PRE",{class:!0});var Ti=u(Mn);Rl=k(Ti,!1),Ti.forEach(e),zl=o(t),En=p(t,"P",{"data-svelte-h":!0}),c(En)!=="svelte-d6wk47"&&(En.innerHTML=Bu),ql=o(t),Rn=p(t,"PRE",{class:!0});var Pi=u(Rn);Ul=k(Pi,!1),Pi.forEach(e),Xl=o(t),zn=p(t,"P",{"data-svelte-h":!0}),c(zn)!=="svelte-ym77za"&&(zn.innerHTML=Qu),jl=o(t),qn=p(t,"PRE",{class:!0});var Li=u(qn);Al=k(Li,!1),Li.forEach(e),hl=o(t),Un=p(t,"P",{"data-svelte-h":!0}),c(Un)!=="svelte-sc3q66"&&(Un.textContent=Fu),Ol=o(t),Xn=p(t,"PRE",{class:!0});var Hi=u(Xn);Sl=k(Hi,!1),Hi.forEach(e),Kl=o(t),jn=p(t,"P",{"data-svelte-h":!0}),c(jn)!=="svelte-1fl7td5"&&(jn.textContent=Wu),$l=o(t),An=p(t,"P",{"data-svelte-h":!0}),c(An)!=="svelte-15bsewr"&&(An.innerHTML=Iu),Bl=o(t),hn=p(t,"P",{"data-svelte-h":!0}),c(hn)!=="svelte-1s9fx1"&&(hn.textContent=Vu),Ql=o(t),On=p(t,"P",{"data-svelte-h":!0}),c(On)!=="svelte-1v5tgmh"&&(On.innerHTML=Du),Fl=o(t),Sn=p(t,"H2",{"data-svelte-h":!0}),c(Sn)!=="svelte-g38o1c"&&(Sn.textContent=Gu),Wl=o(t),Kn=p(t,"P",{"data-svelte-h":!0}),c(Kn)!=="svelte-13oqgh3"&&(Kn.innerHTML=Ju),this.h()},h(){ns.a=null,r(E,"class","language-cpp"),Bs.a=null,r(rt,"class","language-cpp"),Js.a=null,r(dt,"class","language-cpp"),aa.a=null,r(Mt,"class","language-cpp"),va.a=null,r(At,"class","language-cpp"),ya.a=null,r(Qt,"class","language-cpp"),Ha.a=null,r(It,"class","language-cpp"),Ea.a=null,r(Dt,"class","language-cpp"),qa.a=null,r(Jt,"class","language-cpp"),Qa.a=null,r(pe,"class","language-cpp"),Na.a=null,r(ke,"class","language-cpp"),tp.a=null,r(me,"class","language-cpp"),pp.a=null,r(Ce,"class","language-cpp"),rp.a=null,r(Le,"class","language-cpp"),xp.a=null,r(Me,"class","language-cpp"),Pp.a=null,r(Xe,"class","language-cpp"),Mp.a=null,r(he,"class","language-cpp"),Up.a=null,r($e,"class","language-cpp"),hp.a=null,r(Fe,"class","language-cpp"),$p.a=null,r(Ve,"class","language-cpp"),Vp.a=null,r(Ne,"class","language-cpp"),Jp.a=null,r(Ze,"class","language-cpp"),cl.a=null,r(kn,"class","language-cpp"),ml.a=null,r(xn,"class","language-cpp"),_l.a=null,r(Cn,"class","language-cpp"),wl.a=null,r(wn,"class","language-cpp"),bl.a=null,r(Hn,"class","language-cpp"),Rl.a=null,r(Mn,"class","language-cpp"),Ul.a=null,r(Rn,"class","language-cpp"),Al.a=null,r(qn,"class","language-cpp"),Sl.a=null,r(Xn,"class","language-cpp")},m(t,n){s(t,v,n),s(t,Fn,n),s(t,x,n),s(t,Wn,n),s(t,_,n),s(t,In,n),s(t,C,n),s(t,Vn,n),s(t,d,n),s(t,Dn,n),s(t,w,n),s(t,Gn,n),s(t,y,n),s(t,Jn,n),s(t,T,n),s(t,Nn,n),s(t,P,n),s(t,Yn,n),s(t,L,n),s(t,Zn,n),s(t,H,n),s(t,gn,n),s(t,b,n),s(t,ts,n),s(t,M,n),s(t,es,n),s(t,E,n),ns.m(Mi,E),s(t,ss,n),s(t,R,n),s(t,as,n),s(t,z,n),s(t,ps,n),s(t,q,n),s(t,ls,n),s(t,U,n),s(t,os,n),s(t,X,n),s(t,cs,n),s(t,j,n),s(t,us,n),s(t,A,n),s(t,is,n),s(t,h,n),s(t,ks,n),s(t,O,n),s(t,rs,n),s(t,S,n),s(t,vs,n),s(t,K,n),s(t,ms,n),s(t,$,n),s(t,fs,n),s(t,B,n),s(t,xs,n),s(t,Q,n),s(t,_s,n),s(t,F,n),s(t,Cs,n),s(t,W,n),s(t,ds,n),s(t,I,n),s(t,ws,n),s(t,V,n),s(t,ys,n),s(t,D,n),s(t,Ts,n),s(t,G,n),s(t,Ps,n),s(t,J,n),s(t,Ls,n),s(t,N,n),s(t,Hs,n),s(t,Y,n),s(t,bs,n),s(t,Z,n),s(t,Ms,n),s(t,g,n),s(t,Es,n),s(t,tt,n),s(t,Rs,n),s(t,et,n),s(t,zs,n),s(t,nt,n),s(t,qs,n),s(t,st,n),s(t,Us,n),s(t,at,n),s(t,Xs,n),s(t,pt,n),s(t,js,n),s(t,lt,n),s(t,As,n),s(t,ot,n),s(t,hs,n),s(t,ct,n),s(t,Os,n),s(t,ut,n),s(t,Ss,n),s(t,it,n),s(t,Ks,n),s(t,kt,n),s(t,$s,n),s(t,rt,n),Bs.m(Ei,rt),s(t,Qs,n),s(t,vt,n),s(t,Fs,n),s(t,mt,n),s(t,Ws,n),s(t,ft,n),s(t,Is,n),s(t,xt,n),s(t,Vs,n),s(t,_t,n),s(t,Ds,n),s(t,Ct,n),s(t,Gs,n),s(t,dt,n),Js.m(Ri,dt),s(t,Ns,n),s(t,wt,n),s(t,Ys,n),s(t,yt,n),s(t,Zs,n),s(t,Tt,n),s(t,gs,n),s(t,Pt,n),s(t,ta,n),s(t,Lt,n),s(t,ea,n),s(t,Ht,n),s(t,na,n),s(t,bt,n),s(t,sa,n),s(t,Mt,n),aa.m(zi,Mt),s(t,pa,n),s(t,Et,n),s(t,la,n),s(t,Rt,n),s(t,oa,n),s(t,zt,n),s(t,ca,n),s(t,qt,n),s(t,ua,n),s(t,Ut,n),s(t,ia,n),s(t,Xt,n),s(t,ka,n),s(t,jt,n),s(t,ra,n),s(t,At,n),va.m(qi,At),s(t,ma,n),s(t,ht,n),s(t,fa,n),s(t,Ot,n),s(t,xa,n),s(t,St,n),s(t,_a,n),s(t,Kt,n),s(t,Ca,n),s(t,$t,n),s(t,da,n),s(t,Bt,n),s(t,wa,n),s(t,Qt,n),ya.m(Ui,Qt),s(t,Ta,n),s(t,Ft,n),s(t,Pa,n),s(t,Wt,n),s(t,La,n),s(t,It,n),Ha.m(Xi,It),s(t,ba,n),s(t,Vt,n),s(t,Ma,n),s(t,Dt,n),Ea.m(ji,Dt),s(t,Ra,n),s(t,Gt,n),s(t,za,n),s(t,Jt,n),qa.m(Ai,Jt),s(t,Ua,n),s(t,Nt,n),s(t,Xa,n),s(t,Yt,n),s(t,ja,n),s(t,Zt,n),s(t,Aa,n),s(t,gt,n),s(t,ha,n),s(t,te,n),s(t,Oa,n),s(t,ee,n),s(t,Sa,n),s(t,ne,n),s(t,Ka,n),s(t,se,n),s(t,$a,n),s(t,ae,n),s(t,Ba,n),s(t,pe,n),Qa.m(hi,pe),s(t,Fa,n),s(t,le,n),s(t,Wa,n),s(t,m,n),Qn(m,Dl),Qn(m,Gl),Qn(m,Jl),s(t,Ia,n),s(t,oe,n),s(t,Va,n),s(t,ce,n),s(t,Da,n),s(t,ue,n),s(t,Ga,n),s(t,ie,n),s(t,Ja,n),s(t,ke,n),Na.m(Oi,ke),s(t,Ya,n),s(t,re,n),s(t,Za,n),s(t,ve,n),s(t,ga,n),s(t,me,n),tp.m(Si,me),s(t,ep,n),s(t,fe,n),s(t,np,n),s(t,xe,n),s(t,sp,n),s(t,_e,n),s(t,ap,n),s(t,Ce,n),pp.m(Ki,Ce),s(t,lp,n),s(t,de,n),s(t,op,n),s(t,we,n),s(t,cp,n),s(t,ye,n),s(t,up,n),s(t,Te,n),s(t,ip,n),s(t,Pe,n),s(t,kp,n),s(t,Le,n),rp.m($i,Le),s(t,vp,n),s(t,He,n),s(t,mp,n),s(t,be,n),s(t,fp,n),s(t,Me,n),xp.m(Bi,Me),s(t,_p,n),s(t,Ee,n),s(t,Cp,n),s(t,Re,n),s(t,dp,n),s(t,ze,n),s(t,wp,n),s(t,qe,n),s(t,yp,n),s(t,Ue,n),s(t,Tp,n),s(t,Xe,n),Pp.m(Qi,Xe),s(t,Lp,n),s(t,je,n),s(t,Hp,n),s(t,Ae,n),s(t,bp,n),s(t,he,n),Mp.m(Fi,he),s(t,Ep,n),s(t,Oe,n),s(t,Rp,n),s(t,Se,n),s(t,zp,n),s(t,Ke,n),s(t,qp,n),s(t,$e,n),Up.m(Wi,$e),s(t,Xp,n),s(t,Be,n),s(t,jp,n),s(t,Qe,n),s(t,Ap,n),s(t,Fe,n),hp.m(Ii,Fe),s(t,Op,n),s(t,We,n),s(t,Sp,n),s(t,Ie,n),s(t,Kp,n),s(t,Ve,n),$p.m(Vi,Ve),s(t,Bp,n),s(t,f,n),Qn(f,Nl),Qn(f,Yl),Qn(f,Zl),s(t,Qp,n),s(t,De,n),s(t,Fp,n),s(t,Ge,n),s(t,Wp,n),s(t,Je,n),s(t,Ip,n),s(t,Ne,n),Vp.m(Di,Ne),s(t,Dp,n),s(t,Ye,n),s(t,Gp,n),s(t,Ze,n),Jp.m(Gi,Ze),s(t,Np,n),s(t,ge,n),s(t,Yp,n),s(t,tn,n),s(t,Zp,n),s(t,en,n),s(t,gp,n),s(t,nn,n),s(t,tl,n),s(t,sn,n),s(t,el,n),s(t,an,n),s(t,nl,n),s(t,pn,n),s(t,sl,n),s(t,ln,n),s(t,al,n),s(t,on,n),s(t,pl,n),s(t,cn,n),s(t,ll,n),s(t,un,n),s(t,ol,n),s(t,kn,n),cl.m(Ji,kn),s(t,ul,n),s(t,rn,n),s(t,il,n),s(t,vn,n),s(t,kl,n),s(t,mn,n),s(t,rl,n),s(t,fn,n),s(t,vl,n),s(t,xn,n),ml.m(Ni,xn),s(t,fl,n),s(t,_n,n),s(t,xl,n),s(t,Cn,n),_l.m(Yi,Cn),s(t,Cl,n),s(t,dn,n),s(t,dl,n),s(t,wn,n),wl.m(Zi,wn),s(t,yl,n),s(t,yn,n),s(t,Tl,n),s(t,Tn,n),s(t,Pl,n),s(t,Pn,n),s(t,Ll,n),s(t,Ln,n),s(t,Hl,n),s(t,Hn,n),bl.m(gi,Hn),s(t,Ml,n),s(t,bn,n),s(t,El,n),s(t,Mn,n),Rl.m(tk,Mn),s(t,zl,n),s(t,En,n),s(t,ql,n),s(t,Rn,n),Ul.m(ek,Rn),s(t,Xl,n),s(t,zn,n),s(t,jl,n),s(t,qn,n),Al.m(nk,qn),s(t,hl,n),s(t,Un,n),s(t,Ol,n),s(t,Xn,n),Sl.m(sk,Xn),s(t,Kl,n),s(t,jn,n),s(t,$l,n),s(t,An,n),s(t,Bl,n),s(t,hn,n),s(t,Ql,n),s(t,On,n),s(t,Fl,n),s(t,Sn,n),s(t,Wl,n),s(t,Kn,n)},p:gl,i:gl,o:gl,d(t){t&&(e(v),e(Fn),e(x),e(Wn),e(_),e(In),e(C),e(Vn),e(d),e(Dn),e(w),e(Gn),e(y),e(Jn),e(T),e(Nn),e(P),e(Yn),e(L),e(Zn),e(H),e(gn),e(b),e(ts),e(M),e(es),e(E),e(ss),e(R),e(as),e(z),e(ps),e(q),e(ls),e(U),e(os),e(X),e(cs),e(j),e(us),e(A),e(is),e(h),e(ks),e(O),e(rs),e(S),e(vs),e(K),e(ms),e($),e(fs),e(B),e(xs),e(Q),e(_s),e(F),e(Cs),e(W),e(ds),e(I),e(ws),e(V),e(ys),e(D),e(Ts),e(G),e(Ps),e(J),e(Ls),e(N),e(Hs),e(Y),e(bs),e(Z),e(Ms),e(g),e(Es),e(tt),e(Rs),e(et),e(zs),e(nt),e(qs),e(st),e(Us),e(at),e(Xs),e(pt),e(js),e(lt),e(As),e(ot),e(hs),e(ct),e(Os),e(ut),e(Ss),e(it),e(Ks),e(kt),e($s),e(rt),e(Qs),e(vt),e(Fs),e(mt),e(Ws),e(ft),e(Is),e(xt),e(Vs),e(_t),e(Ds),e(Ct),e(Gs),e(dt),e(Ns),e(wt),e(Ys),e(yt),e(Zs),e(Tt),e(gs),e(Pt),e(ta),e(Lt),e(ea),e(Ht),e(na),e(bt),e(sa),e(Mt),e(pa),e(Et),e(la),e(Rt),e(oa),e(zt),e(ca),e(qt),e(ua),e(Ut),e(ia),e(Xt),e(ka),e(jt),e(ra),e(At),e(ma),e(ht),e(fa),e(Ot),e(xa),e(St),e(_a),e(Kt),e(Ca),e($t),e(da),e(Bt),e(wa),e(Qt),e(Ta),e(Ft),e(Pa),e(Wt),e(La),e(It),e(ba),e(Vt),e(Ma),e(Dt),e(Ra),e(Gt),e(za),e(Jt),e(Ua),e(Nt),e(Xa),e(Yt),e(ja),e(Zt),e(Aa),e(gt),e(ha),e(te),e(Oa),e(ee),e(Sa),e(ne),e(Ka),e(se),e($a),e(ae),e(Ba),e(pe),e(Fa),e(le),e(Wa),e(m),e(Ia),e(oe),e(Va),e(ce),e(Da),e(ue),e(Ga),e(ie),e(Ja),e(ke),e(Ya),e(re),e(Za),e(ve),e(ga),e(me),e(ep),e(fe),e(np),e(xe),e(sp),e(_e),e(ap),e(Ce),e(lp),e(de),e(op),e(we),e(cp),e(ye),e(up),e(Te),e(ip),e(Pe),e(kp),e(Le),e(vp),e(He),e(mp),e(be),e(fp),e(Me),e(_p),e(Ee),e(Cp),e(Re),e(dp),e(ze),e(wp),e(qe),e(yp),e(Ue),e(Tp),e(Xe),e(Lp),e(je),e(Hp),e(Ae),e(bp),e(he),e(Ep),e(Oe),e(Rp),e(Se),e(zp),e(Ke),e(qp),e($e),e(Xp),e(Be),e(jp),e(Qe),e(Ap),e(Fe),e(Op),e(We),e(Sp),e(Ie),e(Kp),e(Ve),e(Bp),e(f),e(Qp),e(De),e(Fp),e(Ge),e(Wp),e(Je),e(Ip),e(Ne),e(Dp),e(Ye),e(Gp),e(Ze),e(Np),e(ge),e(Yp),e(tn),e(Zp),e(en),e(gp),e(nn),e(tl),e(sn),e(el),e(an),e(nl),e(pn),e(sl),e(ln),e(al),e(on),e(pl),e(cn),e(ll),e(un),e(ol),e(kn),e(ul),e(rn),e(il),e(vn),e(kl),e(mn),e(rl),e(fn),e(vl),e(xn),e(fl),e(_n),e(xl),e(Cn),e(Cl),e(dn),e(dl),e(wn),e(yl),e(yn),e(Tl),e(Tn),e(Pl),e(Pn),e(Ll),e(Ln),e(Hl),e(Hn),e(Ml),e(bn),e(El),e(Mn),e(zl),e(En),e(ql),e(Rn),e(Xl),e(zn),e(jl),e(qn),e(hl),e(Un),e(Ol),e(Xn),e(Kl),e(jn),e($l),e(An),e(Bl),e(hn),e(Ql),e(On),e(Fl),e(Sn),e(Wl),e(Kn))}}}const ik={title:"C++中的值类别",imgUrl:"/post-images/value_cat.png",publishedAt:"2024-9-11",summary:"表达式是C++语言的基石。每个表达式都有两个属性：类型（type）和值类别（value category）。前者是大家都熟悉的，但是后者却可能是我们不太在意的。本文的目的是介绍与值类别相关的一些知识。"};class kk extends pk{constructor(v){super(),lk(this,v,null,ok,ak,{})}}export{kk as default,ik as metadata};
