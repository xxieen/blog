import{s as yt,n as X}from"./scheduler.DKuV8lkR.js";import{S as ht,i as Tt,e as a,s as p,H as Y,c as l,g as c,a as o,b as Z,d as $,f as s,h as g,j as n}from"./index.BWbrWu7K.js";function Mt(Ct){let i,tt="const 常量",E,r,et="特性",U,u,st="const可以修饰变量和指针",P,k,nt="<li>必须初始化</li> <li>不能修改</li>",j,m,at="const常量和宏定义常量有什么区别？",R,x,lt="发生时机不同",q,v,pt="<li>const 常量在编译阶段定义</li> <li>宏定义在预处理阶段</li>",z,_,ot="类型检查",O,f,ct="<li>const 常量会由编译器进行类型检查，更安全不易出错</li> <li>宏定义没有类型检查，只是进行简单的文本替换</li>",S,C,it="作用域",A,H,rt="<li>const 常量遵循普通的变量作用域规则，具有块级作用域。</li> <li>宏定义没有作用域限制，它是全局性的，可以在定义点之后的任何位置使用。</li>",B,L,ut="<em>~定义常量尽量使用const或者枚举类型enum~</em>",D,w,kt="const修饰指针",F,y,mt=`<li><strong>const修饰指针本身</strong> -&gt; 指针常量<em>const pointer</em>：
即 const 在 int* 后面</li>`,G,h,I,Ht=`<code class="language-cpp"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span><span class="token keyword">const</span> ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span> <span class="token comment">// ptr是一个常量指针，指向int类型的对象</span>

<span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token comment">// 合法，通过ptr修改了所指向对象x的值为30</span>
ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>y<span class="token punctuation">;</span>  <span class="token comment">// 非法，ptr是常量，不能修改指针的值</span></code>`,J,T,xt=`<li><strong>const修饰指针所指向的对象</strong> -&gt; 常量指针<em>pointer to const</em>：
即 const 在 int<em>前面 也可以写成 const在</em>前面</li>`,K,M,N,Lt=`<code class="language-cpp"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span> <span class="token comment">// ptr是一个指向常量int类型对象的指针</span>
<span class="token comment">//等同于 int const *ptr</span>
<span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// 非法，ptr指向的是一个常量对象，不能通过ptr修改其值</span>
ptr<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token comment">// 合法，因为ptr本身不是常量，可以改变指针的指向</span></code>`,Q,d,vt=`<li><strong>const同时修饰指针和指针所指向的对象</strong>：
即 const 同时在 int* 的前面和后面</li>`,V,b,W,wt=`<code class="language-cpp"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token keyword">const</span> ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span> <span class="token comment">// ptr是一个常量指针，指向常量int类型的对象</span>

<span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// 非法，ptr指向的是一个常量对象，不能通过ptr修改其值</span>
ptr<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token comment">// 非法，ptr本身是常量，不能修改指针的值</span></code>`;return{c(){i=a("h1"),i.textContent=tt,E=p(),r=a("h2"),r.textContent=et,U=p(),u=a("p"),u.textContent=st,P=p(),k=a("ul"),k.innerHTML=nt,j=p(),m=a("h2"),m.textContent=at,R=p(),x=a("h3"),x.textContent=lt,q=p(),v=a("ol"),v.innerHTML=pt,z=p(),_=a("h3"),_.textContent=ot,O=p(),f=a("ol"),f.innerHTML=ct,S=p(),C=a("h3"),C.textContent=it,A=p(),H=a("ul"),H.innerHTML=rt,B=p(),L=a("p"),L.innerHTML=ut,D=p(),w=a("h2"),w.textContent=kt,F=p(),y=a("ul"),y.innerHTML=mt,G=p(),h=a("pre"),I=new Y(!1),J=p(),T=a("ul"),T.innerHTML=xt,K=p(),M=a("pre"),N=new Y(!1),Q=p(),d=a("ul"),d.innerHTML=vt,V=p(),b=a("pre"),W=new Y(!1),this.h()},l(t){i=l(t,"H1",{"data-svelte-h":!0}),c(i)!=="svelte-m4i49k"&&(i.textContent=tt),E=o(t),r=l(t,"H2",{"data-svelte-h":!0}),c(r)!=="svelte-1gwigdy"&&(r.textContent=et),U=o(t),u=l(t,"P",{"data-svelte-h":!0}),c(u)!=="svelte-109f6i5"&&(u.textContent=st),P=o(t),k=l(t,"UL",{"data-svelte-h":!0}),c(k)!=="svelte-16kc4cd"&&(k.innerHTML=nt),j=o(t),m=l(t,"H2",{"data-svelte-h":!0}),c(m)!=="svelte-lu1hn0"&&(m.textContent=at),R=o(t),x=l(t,"H3",{"data-svelte-h":!0}),c(x)!=="svelte-21tbcx"&&(x.textContent=lt),q=o(t),v=l(t,"OL",{"data-svelte-h":!0}),c(v)!=="svelte-l5u6f2"&&(v.innerHTML=pt),z=o(t),_=l(t,"H3",{"data-svelte-h":!0}),c(_)!=="svelte-15rwqyl"&&(_.textContent=ot),O=o(t),f=l(t,"OL",{"data-svelte-h":!0}),c(f)!=="svelte-74tsys"&&(f.innerHTML=ct),S=o(t),C=l(t,"H3",{"data-svelte-h":!0}),c(C)!=="svelte-bxhdel"&&(C.textContent=it),A=o(t),H=l(t,"UL",{"data-svelte-h":!0}),c(H)!=="svelte-16orzbk"&&(H.innerHTML=rt),B=o(t),L=l(t,"P",{"data-svelte-h":!0}),c(L)!=="svelte-15wri89"&&(L.innerHTML=ut),D=o(t),w=l(t,"H2",{"data-svelte-h":!0}),c(w)!=="svelte-9bpwh8"&&(w.textContent=kt),F=o(t),y=l(t,"UL",{"data-svelte-h":!0}),c(y)!=="svelte-1053nec"&&(y.innerHTML=mt),G=o(t),h=l(t,"PRE",{class:!0});var e=Z(h);I=$(e,!1),e.forEach(s),J=o(t),T=l(t,"UL",{"data-svelte-h":!0}),c(T)!=="svelte-81ko72"&&(T.innerHTML=xt),K=o(t),M=l(t,"PRE",{class:!0});var _t=Z(M);N=$(_t,!1),_t.forEach(s),Q=o(t),d=l(t,"UL",{"data-svelte-h":!0}),c(d)!=="svelte-zhkyjr"&&(d.innerHTML=vt),V=o(t),b=l(t,"PRE",{class:!0});var ft=Z(b);W=$(ft,!1),ft.forEach(s),this.h()},h(){I.a=null,g(h,"class","language-cpp"),N.a=null,g(M,"class","language-cpp"),W.a=null,g(b,"class","language-cpp")},m(t,e){n(t,i,e),n(t,E,e),n(t,r,e),n(t,U,e),n(t,u,e),n(t,P,e),n(t,k,e),n(t,j,e),n(t,m,e),n(t,R,e),n(t,x,e),n(t,q,e),n(t,v,e),n(t,z,e),n(t,_,e),n(t,O,e),n(t,f,e),n(t,S,e),n(t,C,e),n(t,A,e),n(t,H,e),n(t,B,e),n(t,L,e),n(t,D,e),n(t,w,e),n(t,F,e),n(t,y,e),n(t,G,e),n(t,h,e),I.m(Ht,h),n(t,J,e),n(t,T,e),n(t,K,e),n(t,M,e),N.m(Lt,M),n(t,Q,e),n(t,d,e),n(t,V,e),n(t,b,e),W.m(wt,b)},p:X,i:X,o:X,d(t){t&&(s(i),s(E),s(r),s(U),s(u),s(P),s(k),s(j),s(m),s(R),s(x),s(q),s(v),s(z),s(_),s(O),s(f),s(S),s(C),s(A),s(H),s(B),s(L),s(D),s(w),s(F),s(y),s(G),s(h),s(J),s(T),s(K),s(M),s(Q),s(d),s(V),s(b))}}}const Et={title:"const 常量的使用",imgUrl:"/post-images/vim-essentials-cheatsheet.jpg",publishedAt:"2024-07-26",summary:"简要介绍了cpp中const常量的使用以及注意事项"};class Ut extends ht{constructor(i){super(),Tt(this,i,null,Mt,yt,{})}}export{Ut as default,Et as metadata};
